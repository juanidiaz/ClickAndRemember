{"version":3,"sources":["components/Card.js","components/Game.js","index.js"],"names":["Cards","props","react_default","a","createElement","className","style","width","onClick","handleClickGem","src","image","data-gem","alt","Game","state","images","clickedGems","wins","record","message","increaseScore","_this","setState","event","gemSelected","target","attributes","getNamedItem","value","console","log","concat","msg","indexOf","push","shuffleArray","array","i","length","j","Math","floor","random","temp","_this2","this","id","map","key","Card","Component","ReactDOM","render","components_Game","document","getElementById"],"mappings":"oMAgBeA,MAZf,SAAeC,GAKZ,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MALV,CACZC,MAAO,SAIgCC,QAASP,EAAMQ,gBACnDP,EAAAC,EAAAC,cAAA,OAAKM,IAAK,WAAaT,EAAMU,MAAQ,OAAQC,WAAUX,EAAMU,MAAON,UAAU,eAAeQ,IAAI,WCgF3FC,6MAtFZC,MAAQ,CACLC,OAAQ,CAAC,aAAc,kBAAmB,gBAAiB,SAAU,SAAU,aAAc,YAAa,QAAS,aAAc,OAAQ,UAAW,cAAe,kBAAmB,UAAW,UAAW,iBAAkB,kBAAmB,WACjPC,YAAa,GACbC,KAAM,EACNC,OAAQ,EACRC,QAAS,MAGZC,cAAgB,SAACH,EAAMC,GAOpB,QANAD,EACWC,IACRA,EAASD,GAEZI,EAAKC,SAAS,CAAEL,KAAMA,EAAMC,OAAQA,IAE7BG,EAAKC,SAAS,CAAEL,KAAMA,EAAMC,OAAQA,OAG9CV,eAAiB,SAAAe,GACd,IAAIC,EAAcD,EAAME,OAAOC,WAAWC,aAAa,YAAYC,MACnEC,QAAQC,IAAR,iBAAAC,OAA6BP,IAC7B,IAAIQ,EAAM,IAE2C,IAAjDX,EAAKP,MAAME,YAAYiB,QAAQT,IAGhCH,EAAKP,MAAME,YAAYkB,KAAKV,GAC5BQ,EAAM,GACNX,EAAKD,cAAcC,EAAKP,MAAMG,KAAMI,EAAKP,MAAMI,UAI/Cc,EAAM,sCACNX,EAAKC,SAAS,CAAEL,KAAM,KAGzBI,EAAKC,SAAS,CAAEP,OAAQM,EAAKc,aAAad,EAAKP,MAAMC,QAASI,QAASa,OAO1EG,aAAe,SAAAC,GACZ,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAKd,OAFAd,QAAQC,IAAIM,GAELA,2EAGD,IAAAQ,EAAAC,KACN,OACG5C,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,WAASC,UAAU,wCAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wBAAgB0C,KAAK/B,MAAMG,MAA/B,kBAA6D4B,KAAK/B,MAAMI,QACxEjB,EAAAC,EAAAC,cAAA,KAAG2C,GAAG,OACFD,KAAK/B,MAAMK,WAKrBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXyC,KAAK/B,MAAMC,OAAOgC,IAAI,SAAArC,GAAK,OACzBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW4C,IAAKtC,GAC5BT,EAAAC,EAAAC,cAAC8C,EAAD,CACGvC,MAAOA,EACPF,eAAgBoC,EAAKpC,8BA5E7B0C,aCGnBC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAAUC,SAASC,eAAe","file":"static/js/main.797d9c75.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\nfunction Cards(props) {\r\n   let divStyle = {\r\n      width: '10rem'\r\n   }\r\n\r\n   return (\r\n      <div className=\"card\" style={divStyle} onClick={props.handleClickGem}>\r\n         <img src={'./image/' + props.image + '.png'} data-gem={props.image} className=\"card-img-top\" alt=\"gems\" />\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Cards;\r\n","import React, { Component } from \"react\";\r\nimport Card from './Card';\r\n\r\nclass Game extends Component {\r\n\r\n   state = {\r\n      images: ['chrysolite', 'sapphire_orange', 'sapphire_blue', 'garnet', 'spinel', 'topaz_gray', 'tanzanite', 'pearl', 'aquamarine', 'rubi', 'citrine', 'topaz_amber', 'sapphire_purple', 'emerald', 'diamond', 'amethyst_green', 'amethyst_purple', 'kunzite'],\r\n      clickedGems: [],\r\n      wins: 0,\r\n      record: 0,\r\n      message: ''\r\n   };\r\n\r\n   increaseScore = (wins, record) => {\r\n      wins++\r\n      if (wins > record) {\r\n         record = wins;\r\n      };\r\n      this.setState({ wins: wins, record: record });\r\n\r\n      return this.setState({ wins: wins, record: record });\r\n   };\r\n\r\n   handleClickGem = event => {\r\n      let gemSelected = event.target.attributes.getNamedItem('data-gem').value;\r\n      console.log(`Gem selected: ${gemSelected}`);\r\n      let msg = '';\r\n\r\n      if (this.state.clickedGems.indexOf(gemSelected) === -1) {\r\n         // Keep going!\r\n         // console.log('GOOD');\r\n         this.state.clickedGems.push(gemSelected);\r\n         msg = ''\r\n         this.increaseScore(this.state.wins, this.state.record);\r\n      } else {\r\n         // You lost! \r\n         // console.log('BAD');\r\n         msg = 'That was a repeated gem... you lost'\r\n         this.setState({ wins: 0 });\r\n      };\r\n\r\n      this.setState({ images: this.shuffleArray(this.state.images), message: msg });\r\n   };\r\n\r\n   /*******************************************\r\n    * Randomize array element order in-place. *\r\n    * Using Durstenfeld shuffle algorithm.    *\r\n    *******************************************/\r\n   shuffleArray = array => {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n         let j = Math.floor(Math.random() * (i + 1));\r\n         let temp = array[i];\r\n         array[i] = array[j];\r\n         array[j] = temp;\r\n      };\r\n\r\n      console.log(array)\r\n\r\n      return array;\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <section className=\"jumbotron pink lighten-4 text-center\">\r\n               <div className=\"container\">\r\n                  <h2><strong>Score: {this.state.wins}</strong>| Best record: {this.state.record}</h2>\r\n                  <p id=\"msg\">\r\n                     {this.state.message}\r\n                  </p>\r\n               </div>\r\n            </section>\r\n\r\n            <div className=\"container gems\">\r\n               <div className=\"row thisRow\">\r\n                  {this.state.images.map(image => (\r\n                     <div className=\"col-md-2\" key={image}>\r\n                        <Card\r\n                           image={image}\r\n                           handleClickGem={this.handleClickGem}\r\n                        />\r\n                     </div>\r\n                  ))}\r\n               </div>\r\n            </div>\r\n         </div>\r\n\r\n      );\r\n   }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}